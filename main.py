import datetime
import logging
import time

from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, \
	ReplyKeyboardRemove
from aiogram.utils import executor

import keyboards
from keyboards import MainKeyboards, OtherKeyboards, generateFilterKeyboard
import config


# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
from dbhelper import SQLighter

logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot, storage=storage)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@dp.message_handler(commands=['start', 'help'])
async def process_start_command(message: types.Message):
	if message.chat.id >= 0:
		if (db.user_ex(message.from_user.id) == True):
			if message.chat.id in config.admins:
				await message.answer(config.start_text, reply_markup=MainKeyboards.admin_kb)
				await message.answer(config.main_text, reply_markup=MainKeyboards.admin_kb)
			else:
				await message.answer(config.start_text, reply_markup=MainKeyboards.user_kb)
				await message.answer(config.main_text, reply_markup=MainKeyboards.inline_user_kb)
		else:
			db.newUser(message.from_user.id)
			await message.answer(config.rules, reply_markup=MainKeyboards.user_kb)
			await message.answer(config.start_text, reply_markup=MainKeyboards.user_kb)
			await message.answer(config.main_text, reply_markup=MainKeyboards.inline_user_kb)
	else:
		await message.answer("–Ø –∑–∞–ø—É—Å–∫–∞—é—Å—å —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler()
async def echo_message(message: types.Message, state: FSMContext):
	if message.text == 'üíé –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
		await message.answer(config.main_text, reply_markup=MainKeyboards.inline_user_kb)
	if message.text == "üåù –ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∫–ª–∞–º–∞ üåù":
		await message.answer("–ö–∞–∫–æ–π —Ç–æ —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç.\n–ï—Å–ª–∏ —á—Ç–æ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞: @KevinMertence")
	if message.text == "üìù –ü—Ä–∞–≤–∏–ª–∞":
		await message.answer(config.rules, reply_markup=OtherKeyboards.inline_close_kb)

	# ADMINS

	if message.text == "üíå –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" and message.from_user.id in config.admins:
		await state.set_state('send_all')
		await message.answer("\n–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ç–µ–≥–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞.\n" \
							 "–ü—Ä–∏–º–µ—Ä: <b>—Ç–µ–∫—Å—Ç</b> –¥–∞—Å—Ç –≤–∞–º *—Ç–µ–∫—Å—Ç*\n\n" \
							 "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", parse_mode="Markdown", reply_markup=OtherKeyboards.inline_cancel_kb)
	if message.text == "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É" and message.from_user.id in config.admins:
		stats_data = await db.get_data_stats()
		await message.answer(config.stats_text.format(users=stats_data['users'],
													  qty_logs=stats_data['qty_logs'],
													  paid=stats_data['paid'],
													  best_user=stats_data['best_user']), parse_mode="HTML")


@dp.message_handler(state='send_all')
async def send_all(message, state: FSMContext):
	buttons = [
	    types.InlineKeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"),
	    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
	]

	answer = types.InlineKeyboardMarkup(row_width=2)
	answer.add(*buttons)
	await state.update_data(msg_send_text=message.text)

	await message.answer(message.text, reply_markup=answer, parse_mode="HTML")

@dp.message_handler(content_types=['photo'], state='send_all')
async def send_all(message: types.Message, state: FSMContext):
	buttons = [
	    types.InlineKeyboardButton(text="üíå –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="send"),
	    types.InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
	]

	answer = types.InlineKeyboardMarkup(row_width=2)
	answer.add(*buttons)
	photo_id = message.photo[0].file_id
	await state.update_data(msg_send_text=message.caption)
	await state.update_data(photo_id=photo_id)
	await bot.send_photo(message.chat.id, photo=photo_id, caption=message.caption, reply_markup=answer, parse_mode="HTML")



@dp.callback_query_handler(lambda call: call.data == "send", state='send_all')
async def send_all(call: types.CallbackQuery, state: FSMContext):
	try:
		photo_id = (await state.get_data())['photo_id']
		cg = 0
		cn = 0
		await bot.send_message(call.message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")

		for user in db.getAllUsersID():
			try:
				await bot.send_photo(user, photo=photo_id, caption=(await state.get_data())['msg_send_text'], parse_mode="HTML")
				cg += 1

			except Exception as e:
				cn += 1

		await bot.send_message(call.message.chat.id, config.send_to_all[0] + str(cg) + config.send_to_all[1] + str(cn))
		await call.message.delete()
	except:
		cg = 0
		cn = 0
		await bot.send_message(call.message.chat.id, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
		for user in db.getAllUsersID():
			try:
				await bot.send_message(user, (await state.get_data())['msg_send_text'], parse_mode="HTML")
				cg += 1
			except Exception as e:
				cn += 1

		await bot.send_message(call.message.chat.id, config.send_to_all[0] + str(cg) + config.send_to_all[1] + str(cn))
		await call.message.delete()
	await state.finish()

# –ò–Ω–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∞
class sendStates(StatesGroup):
	getFilter = State()
	waitlogs = State()

@dp.callback_query_handler(lambda call: call.data == 'back', state='*')
@dp.callback_query_handler(lambda call: call.data == 'back', state='wait_logs')
@dp.callback_query_handler(lambda call: call.data == 'back', state='get_filter')
@dp.callback_query_handler(lambda call: call.data == 'back')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	await callback_query.message.edit_text(config.main_text, reply_markup=MainKeyboards.inline_user_kb, parse_mode="HTML")
	await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'cancel', state='*')
@dp.callback_query_handler(lambda call: call.data == 'cancel', state='send_all')
@dp.callback_query_handler(lambda call: call.data == 'cancel', state='wait_logs')
@dp.callback_query_handler(lambda call: call.data == 'cancel', state='get_filter')
@dp.callback_query_handler(lambda call: call.data == 'cancel')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	await callback_query.message.delete_reply_markup()
	await callback_query.message.edit_text("–û—Ç–º–µ–Ω–µ–Ω–æ", parse_mode="HTML")
	await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'close', state='*')
@dp.callback_query_handler(lambda call: call.data == 'close', state='wait_logs')
@dp.callback_query_handler(lambda call: call.data == 'close', state='get_filter')
@dp.callback_query_handler(lambda call: call.data == 'close')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	await callback_query.message.delete()
	await state.finish()


@dp.callback_query_handler(lambda call: call.data == 'delete_buttons', state='*')
@dp.callback_query_handler(lambda call: call.data == 'delete_buttons', state='wait_logs')
@dp.callback_query_handler(lambda call: call.data == 'delete_buttons', state='get_filter')
@dp.callback_query_handler(lambda call: call.data == 'delete_buttons')
async def delete_buttons(callback_query: types.CallbackQuery, state: FSMContext):
	if not bool(callback_query.message.text):
		await callback_query.message.delete_reply_markup()
		await callback_query.message.edit_caption(callback_query.message.caption+"\n–ü—Ä–æ–≤–µ—Ä–µ–Ω", parse_mode="HTML")
	else:
		await callback_query.message.delete_reply_markup()
		await callback_query.message.edit_text(callback_query.message.text + "\n–ü—Ä–æ–≤–µ—Ä–µ–Ω", parse_mode="HTML")
	await state.finish()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–æ–≤
@dp.callback_query_handler(lambda call: call.data == 'send_logs' )
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	await state.update_data(services_list=await config.get_all_services())
	await callback_query.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ–± –º—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏:", parse_mode="HTML", reply_markup=await generateFilterKeyboard(config.services))
	await state.set_state('get_filter')

@dp.callback_query_handler(text_startswith="service:", state='get_filter')
async def gg(call: types.CallbackQuery, state: FSMContext):
	service_taped = call.data.split(':')[1]
	user_data = (await state.get_data())['services_list']

	if user_data[service_taped]:
		user_data[service_taped] = 0
	else:
		user_data[service_taped] = 1

	await state.update_data(services_list=user_data)

	await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏:", parse_mode="HTML", reply_markup=await generateFilterKeyboard(user_data))



@dp.callback_query_handler(lambda call: call.data == 'next', state='get_filter')
async def next(callback_query: types.CallbackQuery, state: FSMContext):
	if not bool(sum((await state.get_data())['services_list'].values())):
		await callback_query.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è–±—ã –æ–¥–∏–Ω —Å–µ—Ä–≤–∏—Å!')
	else:
		await callback_query.message.edit_text("üóÇ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ö–∏–≤ –≤ –±–æ—Ç–∞, —Ç–∞–∫ –∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.", parse_mode="HTML", reply_markup=OtherKeyboards.inline_back_kb)
		await state.set_state('wait_logs')

@dp.message_handler(content_types=['document'], state='wait_logs')
async def scan_message(message: types.Message, state: FSMContext):
	user_id = message.from_user.id
	payment = 0
	date = datetime.datetime.today()
	logs_id = await db.getLastLogs() + 1
	services = (await state.get_data())['services_list']
	text = f'<b>ID-{logs_id}\n' \
		   f'–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n' \
		   f'–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.datetime.now()}\n</b>\n'
	for i in services:
		if services[i] == 0:
			text += f"‚ùå {i}\n"
		else:
			text += f"‚úÖ {i}\n"
	await bot.send_document(chat_id=config.chat_id, document=message.document.file_id,
							caption=text, reply_markup=OtherKeyboards.inline_checklog_kb, parse_mode="HTML")
	await db.addLogs(user_id, payment, date)
	await db.addOneLog(user_id)
	await message.reply(f"–õ–æ–≥–∏ <b>‚Ññ{logs_id}</b> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
						f"–°–∫–æ—Ä–æ –≤–∞—à–∏ –ª–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –Ω–∞—á–∏—Å–ª—è—Ç –≤–∞–º –±–∞–ª–∞–Ω—Å –¥–µ–Ω—å–≥–∏.", parse_mode="HTML",
						reply_markup=OtherKeyboards.inline_back_kb)
	await state.finish()


@dp.message_handler(state='wait_logs')
async def echo_message(message: types.Message, state: FSMContext):
	if "http://" in message.text or "https://" in message.text:
		user_id = message.from_user.id
		payment = 0
		date = datetime.datetime.today()
		logs_id = await db.getLastLogs() + 1
		services = (await state.get_data())['services_list']
		text = f'<b>ID-{logs_id}\n' \
			   f'{message.text}\n' \
			   f'–õ–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}\n' \
			   f'–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {datetime.datetime.now()}\n</b>\n'
		for i in services:
			if services[i] == 0:
				text += f"‚ùå {i}\n"
			else:
				text += f"‚úÖ {i}\n"
		await bot.send_message(chat_id=config.chat_id, text=text,
		reply_markup = OtherKeyboards.inline_checklog_kb, parse_mode = "HTML")

		await db.addLogs(user_id, payment, date)
		await db.addOneLog(user_id)
		await message.reply(f"–õ–æ–≥–∏ <b>‚Ññ{logs_id}</b> –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n"
							f"–°–∫–æ—Ä–æ –≤–∞—à–∏ –ª–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä—è—Ç –∏ –Ω–∞—á–∏—Å–ª—è—Ç –≤–∞–º –±–∞–ª–∞–Ω—Å –¥–µ–Ω—å–≥–∏.", parse_mode="HTML",
							reply_markup=OtherKeyboards.inline_back_kb)
	else:
		await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–∞–π–ª–æ–æ–±–º–µ–Ω–Ω–∏–∫.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", parse_mode="HTML",
							reply_markup=OtherKeyboards.inline_back_kb)
	await state.finish()



# –õ–æ–≥–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
@dp.callback_query_handler(lambda call: call.data == 'add_balance', state='*')
async def have_balance(callback_query: types.CallbackQuery, state: FSMContext):
	if not bool(callback_query.message.text):
		logs_id = callback_query.message.caption.split()[0].split('-')[1]
	else:
		logs_id = callback_query.message.text.split()[0].split('-')[1]
	await state.update_data(logs_id=logs_id)
	await state.update_data(message_id=callback_query.message.message_id)
	await callback_query.message.reply(text="–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:", reply_markup=OtherKeyboards.inline_cancel_kb)
	await state.set_state("wait_for_balance")

@dp.message_handler(state='wait_for_balance')
async def echo_message(message: types.Message, state: FSMContext):
	howmany = int(message.text)
	logs_id = (await state.get_data())['logs_id']
	used_id = await db.get_logs_user_id(logs_id)
	await db.editBalance(used_id, howmany)
	await db.updateLogs(logs_id, howmany, 1)
	await bot.send_message(used_id, text = f"–í–∞—à–∏ –ª–æ–≥–∏ ‚Ññ{logs_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.\n"
										   f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–Ω–æ: {howmany} —Ä—É–±.")
	await message.reply("–ë–∞–ª–∞–Ω—Å –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
	await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'break_logs', state='*')
async def havent_balance(callback_query: types.CallbackQuery, state: FSMContext):
	if not bool(callback_query.message.text):
		logs_id = callback_query.message.caption.split()[0].split('-')[1]
	else:
		logs_id = callback_query.message.text.split()[0].split('-')[1]
	used_id = await db.get_logs_user_id(logs_id)

	await bot.send_message(used_id, text=f"–í–∞—à–∏ –ª–æ–≥–∏ ‚Ññ{logs_id} –±—ã–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã.\n")
	await callback_query.message.delete_reply_markup()


# –ü—Ä–æ—Ñ–∏–ª—å
@dp.callback_query_handler(lambda call: call.data == 'profile')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	user_info = db.getProfileinfo(callback_query.from_user.id)
	await callback_query.message.edit_text(f"<b>üë©üèª‚ÄçüöÄ –ü—Ä–æ—Ñ–∏–ª—å {'@'+callback_query.from_user.username}\n"
										   f"üÜî ID: {user_info[0][1]}\n"
										   f"--------------\n"
										   f"üíµ –ë–∞–ª–∞–Ω—Å: {user_info[0][2]} —Ä—É–±.\n"
										   f"üí∞ –°—É–º–º–∞ –≤—ã–ø–ª–∞—Ç: {user_info[0][3]} —Ä—É–±.\n"
										   f"üì§ –í—Å–µ–≥–æ –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {user_info[0][4]} —à—Ç.\n"
										   f"</b>", parse_mode="HTML", reply_markup=OtherKeyboards.inline_profile)
	await state.finish()

@dp.callback_query_handler(lambda call: call.data == 'withdraw_button')
async def back(callback_query: types.CallbackQuery, state: FSMContext):
	user_info = db.getProfileinfo(callback_query.from_user.id)[0]
	if user_info[2] < 100:
		await callback_query.message.edit_text("–í—ã–≤–æ–¥ –æ—Ç 100 —Ä—É–±–ª–µ–π.", reply_markup=OtherKeyboards.inline_back_kb)
	else:
		await callback_query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:\n"
									"–í—ã–≤–æ–¥ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –Ω–∞ LOLZ –∏ –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã.", reply_markup=OtherKeyboards.inline_cancel_kb)
		await state.set_state('wait_for_req')

@dp.message_handler(state='wait_for_req')
async def echo_message(message: types.Message, state: FSMContext):
	user_info = db.getProfileinfo(message.from_user.id)[0]

	inline_withdraw = InlineKeyboardMarkup(resize_keyboard=True)
	inline_withdraw.add(InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–≤–æ–¥', callback_data=f'successwithdraw:{message.from_user.id}:{user_info[2]}'))
	inline_withdraw.add(InlineKeyboardButton('‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –≤—ã–≤–æ–¥', callback_data=f'cancelwithdraw:{message.from_user.id}:{user_info[2]}'))

	await bot.send_message(config.chat_id, f'‚ÄºÔ∏è –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ @{message.from_user.id}:\n'
										   f'üí∞ –°—É–º–º–∞: {user_info[2]} —Ä—É–±.\n'
										   f'üìú –†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}',
						   reply_markup=inline_withdraw)
	await db.editOnlyBalance(message.from_user.id, user_info[2] * -1)

	await message.answer(f'‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –ø–æ–¥–∞–Ω–∞.\n'
						 f'üí∞ –°—É–º–º–∞: {user_info[2]} —Ä—É–±.\n'
						 f'üìú –†–µ–∫–≤–∏–∑–∏—Ç—ã: {message.text}')

	await state.finish()

@dp.callback_query_handler(text_startswith="successwithdraw:")
async def gg(call: types.CallbackQuery, state: FSMContext):
	data = call.data.split(':')
	await bot.send_message(data[1], f'‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {data[2]} —Ä—É–±. —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n'
									f'üòò –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Å—å –Ω–∞—à–∏–º –±–æ—Ç–æ–º!')
	await call.message.delete_reply_markup()
	await call.message.edit_text(call.message.text + '\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞')
	await state.finish()

@dp.callback_query_handler(text_startswith="cancelwithdraw:")
async def gg(call: types.CallbackQuery, state: FSMContext):
	data = call.data.split(':')
	await bot.send_message(data[1], f'‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {data[2]} —Ä—É–±. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n'
									f'üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
	await db.editOnlyBalance(data[1], data[2])
	await call.message.delete_reply_markup()
	await call.message.edit_text(call.message.text + '\n‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∞')
	await state.finish()

# –ò—Å—Ç–æ—Ä–∏—è
@dp.callback_query_handler(lambda call: call.data == 'history_logs')
async def history_logs(callback_query: types.CallbackQuery, state: FSMContext):
	history = await db.get_user_sent_logs(callback_query.from_user.id)

	await callback_query.message.edit_text(f"üóÇ –í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –ª–æ–≥–æ–≤:", parse_mode="HTML", reply_markup=await keyboards.generateHistory(history))

	await state.finish()

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query_handler(lambda call: call.data == 'help')
async def history_logs(callback_query: types.CallbackQuery, state: FSMContext):
	history = await db.get_user_sent_logs(callback_query.from_user.id)

	await callback_query.message.edit_text(config.help_text, parse_mode="HTML", reply_markup=OtherKeyboards.inline_back_kb)

	await state.finish()

if __name__ == '__main__':
	executor.start_polling(dp)